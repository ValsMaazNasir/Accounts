using LiquadCargoManagment.Helpers;
using LiquadCargoManagment.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using static LiquadCargoManagment.Helpers.ApplicationHelper;

namespace LiquadCargoManagment.Controllers
{
    public class ParchonBiltyController : BaseController
    {
        // GET: ParchonBilty
        #region Parchon Bilty Bill 
        [HttpGet]
        public ActionResult ParchonBill()
        {
            ViewBag.Vehicle = new SelectList(context.VehicleTypes.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)), "ID", "Name");
            ViewBag.OwnCompany = new SelectList(context.OwnCompanies.Where(x => x.SubcriptionID == ApplicationHelper.SubcriptionID), "ID", "Name");
            var BillTo = context.CustomerDepartments.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.Name) }).ToList();
            ViewBag.BillTo = new SelectList(BillTo, "ID", "Code");
            var bilty = context.UniversalBilties.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).OrderByDescending(x => x.ID).ToList();
            return View(bilty);
        }

        public ActionResult ParchonBillList()
        {
            ViewBag.OwnCompany = new SelectList(context.OwnCompanies.Where(x => x.SubcriptionID == SubcriptionID).ToList(), "ID", "Name");
            ViewBag.BillTo = new SelectList(context.CustomerCompanies.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList(), "ID", "Name");
            var list = context.UniversalBills.Where(x => x.IsDeleted != true).OrderByDescending(x => x.ID).ToList();
            return View(list);
        }
        #endregion

        #region Challan 
        [HttpGet]
        public ActionResult ParchonChallan()
        {
            ChallanView();
            var bilty = context.Bilties.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).OrderByDescending(x => x.ID).ToList();
            return View(bilty);
        }

        public ActionResult SearchChallanBilty(CompactBiltyModel model)
        {
            string Status = "OK";
            List<Models.Bilty> lstOrders = new List<Models.Bilty>();
            if (model.DateFrom != null && model.DateTo != null && model.Sender != null && model.Vehicle != null && model.BillTo != null && model.Receiver != null && model.OwnCompany != null && model.OrderNo != null)
            {
                lstOrders = CompactBilty.SearchBiltyAllFilters(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle, model.BillTo, model.Receiver, model.OwnCompany, model.OrderNo, model.Sender).ToList();
            }
            else if (model.Vehicle != null && model.BillTo != null && model.Receiver != null && model.OwnCompany != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVBROS(model.Vehicle, model.BillTo, model.Receiver, model.OwnCompany, model.Sender).ToList();
            }
            else if (model.Vehicle != null && model.BillTo != null && model.Receiver != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVBRO(model.Vehicle, model.BillTo, model.Receiver, model.OwnCompany).ToList();
            }
            else if (model.Vehicle != null && model.BillTo != null && model.Receiver != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVBR(model.Vehicle, model.BillTo, model.Receiver).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Vehicle != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateVehicle(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateSender(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Sender).ToList();
            }
            else if (model.Vehicle != null && model.BillTo != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVB(model.Vehicle, model.BillTo).ToList();
            }
            else if (model.Vehicle != null && model.Receiver != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVR(model.Vehicle, model.Receiver).ToList();
            }
            else if (model.Vehicle != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVO(model.Vehicle, model.OwnCompany).ToList();
            }
            else if (model.Vehicle != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownVS(model.Vehicle, model.Sender).ToList();
            }
            else if (model.BillTo != null && model.Receiver != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownBR(model.BillTo, model.Receiver).ToList();
            }
            else if (model.BillTo != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownBO(model.BillTo, model.OwnCompany).ToList();
            }
            else if (model.BillTo != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownBS(model.BillTo, model.Sender).ToList();
            }
            else if (model.Receiver != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownRO(model.Receiver, model.OwnCompany).ToList();
            }
            else if (model.Receiver != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDropDownRS(model.Receiver, model.Sender).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.BillTo != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateBillTo(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.BillTo).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Receiver != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateReceiver(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Receiver).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateOwnCompany(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.OwnCompany).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Vehicle != null && model.BillTo != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateVehicleBillTo(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle, model.BillTo).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Vehicle != null && model.BillTo != null && model.Receiver != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateVehicleBillToReceiver(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle, model.BillTo, model.Receiver).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Vehicle != null && model.BillTo != null && model.Receiver != null && model.OwnCompany != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateVehicleBillToReceiverOwnCompany(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle, model.BillTo, model.Receiver, model.OwnCompany).ToList();
            }
            else if (model.DateFrom != null && model.DateTo != null && model.Vehicle != null && model.BillTo != null && model.Receiver != null && model.OwnCompany != null && model.Sender != null)
            {
                lstOrders = CompactBilty.SearchBiltyDateVehicleBillToReceiverOwnCompanySender(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo), model.Vehicle, model.BillTo, model.Receiver, model.OwnCompany, model.Sender).ToList();
            }

            else if (model.DateFrom != null && model.DateTo != null)
            {
                lstOrders = dml.getSearchBilty(Convert.ToDateTime(model.DateFrom), Convert.ToDateTime(model.DateTo));
            }
            else if (model.DateFrom != null && model.DateTo == null)
            {
                lstOrders = dml.getSearchBilty(Convert.ToDateTime(model.DateFrom), "from");
            }
            else if (model.DateFrom == null && model.DateTo != null)
            {
                lstOrders = dml.getSearchBilty(Convert.ToDateTime(model.DateTo), "to");
            }
            else if (model.BillTo != null)
            {
                lstOrders = context.Bilties.Where(x => x.BillTo == model.BillTo && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.BillTo != null)
            {
                lstOrders = context.Bilties.Where(x => x.BillTo == x.BillTo && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Receiver != null)
            {
                lstOrders = context.Bilties.Where(x => x.Reciever == model.Receiver && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Receiver != null)
            {
                lstOrders = context.Bilties.Where(x => x.PickLocation == x.PickLocation && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Sender != null)
            {
                lstOrders = context.Bilties.Where(x => x.PickLocation == model.Sender && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Sender != null)
            {
                lstOrders = context.Bilties.Where(x => x.Reciever == x.Reciever && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.OwnCompany != null)
            {
                lstOrders = context.Bilties.Where(x => x.OwnCompany == model.OwnCompany && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.OwnCompany != null)
            {
                lstOrders = context.Bilties.Where(x => x.OwnCompany == x.OwnCompany && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Vehicle != null)
            {
                lstOrders = context.Bilties.Where(x => x.VehicleID == model.Vehicle && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.Vehicle != null)
            {
                lstOrders = context.Bilties.Where(x => x.VehicleID == x.VehicleID && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }
            else if (model.OrderNo != null)
            {
                lstOrders = context.Bilties.Where(x => x.OrderNo == model.OrderNo && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }

            else
            {
                lstOrders = context.Bilties.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList();
            }

            string view = RenderPartialToString("_SearchChallan", lstOrders.ToList());

            return Json(new { html = view, Status = Status }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPickLocationChallan(long id)
        {
            var data = dml.getChallanPickLocation(id);
            return Json(new { City = data.PickLocation1.City.CityName, Area = data.PickLocation1.Area.Name, Address = data.PickLocation1.Address }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetDropLocationChallan(long id)
        {
            var data = dml.getChallanDropLocation(id);
            return Json(new { City = data.PickLocation2.City.CityName, Area = data.PickLocation2.Area.Name, Address = data.PickLocation2.Address }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetVehicleChallan(long id)
        {
            var data = dml.getVehicle(id);
            return Json(new { Reg = data.RegNo, Type = data.VehicleType.Name }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetDriverChallan(long id)
        {
            var data = dml.getDriver(id);
            return Json(new { Contact = data.CellNo }, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetVendorChallan(long id)
        {
            var data = dml.getVendor(id);
            return Json(new { Name = data.OwnerContactName, Contact = data.OwnerContactNo }, JsonRequestBehavior.AllowGet);
        }
        #region Compact Bilty Selected Location
        [HttpPost]
        public JsonResult GetSelectedLocation(long?[] id)
        {
            var DropLocation = context.Bilties.Where(x => id.Contains(x.ID) && lstAssignedCompanies.Contains(x.OwnCompanyID)).Select(x => new { x.PickLocation2.ID, x.PickLocation2.LocationCode, x.PickLocation2.LocationName }).Distinct().ToList();
            var Location = context.Bilties.Where(x => id.Contains(x.ID) && lstAssignedCompanies.Contains(x.OwnCompanyID)).Select(x => new { x.PickLocation1.ID, x.PickLocation1.LocationCode, x.PickLocation1.LocationName }).Distinct().ToList();
            return Json(new { DropLocation = DropLocation, Location = Location }, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region ChallanView
        public void ChallanView()
        {
            ViewBag.CustomerType = new SelectList(context.Bilties.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)), "ID", "CustomerType");
            ViewBag.OwnCompany = new SelectList(context.OwnCompanies.Where(x => x.SubcriptionID == ApplicationHelper.SubcriptionID), "ID", "Name");
            var PickLocation = context.Bilties.Where(x => (x.PickLocation1.LocationType == "Pick" || x.PickLocation1.LocationType == "Both") && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.PickLocation1.ID, LocationCode = string.Format("{0} | {1}", x.PickLocation1.LocationCode, x.PickLocation1.LocationName) }).Distinct().ToList();
            ViewBag.PickLocation = new SelectList(PickLocation, "ID", "LocationCode");
            var DropLocation = context.Bilties.Where(x => (x.PickLocation2.LocationType == "Drop" || x.PickLocation2.LocationType == "Both") && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.PickLocation2.ID, LocationCode = string.Format("{0} | {1}", x.PickLocation2.LocationCode, x.PickLocation2.LocationName) }).Distinct().ToList();
            ViewBag.DropLocation = new SelectList(DropLocation, "ID", "LocationCode");
            ViewBag.SearchDropLocation = new SelectList(DropLocation, "ID", "LocationCode");

            var CustomerComany = context.CustomerCompanies.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.Name) }).ToList();
            ViewBag.CustomerComany = new SelectList(CustomerComany, "ID", "Code");

            var Vehicle = context.Vehicles.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList().Select(x => new { ID = x.VehicleID, Code = string.Format("{0} | {1}", x.Code, x.RegNo) }).ToList();
            ViewBag.Vehicle = new SelectList(Vehicle, "ID", "Code");

            var Broker = context.Vendors.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.OwnerContactName) }).ToList();
            ViewBag.Broker = new SelectList(Broker, "ID", "Code");

            var Driver = context.Drivers.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.Name) }).ToList();
            ViewBag.Driver = new SelectList(Driver, "ID", "Code");
        }
        #endregion

        #endregion

        #region Parchon Challan Grid
        public ActionResult ParchonChallanList()
        {
            ViewBag.CustomerType = new SelectList(context.Bilties.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)), "ID", "CustomerType");
            ViewBag.OwnCompany = new SelectList(context.OwnCompanies.Where(x => x.SubcriptionID == ApplicationHelper.SubcriptionID), "ID", "Name");
            var PickLocation = context.PickLocations.Where(x => x.LocationType == "Pick" || x.LocationType == "Both" && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.ID, LocationCode = string.Format("{0} | {1}", x.LocationCode, x.LocationName) }).ToList();
            ViewBag.PickLocation = new SelectList(PickLocation, "ID", "LocationCode");
            var DropLocation = context.PickLocations.Where(x => x.LocationType == "Drop" || x.LocationType == "Both" && lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.ID, LocationCode = string.Format("{0} | {1}", x.LocationCode, x.LocationName) }).ToList();
            ViewBag.DropLocation = new SelectList(DropLocation, "ID", "LocationCode");
            ViewBag.SearchDropLocation = new SelectList(DropLocation, "ID", "LocationCode");
            //ViewBag.CustomerComany = new SelectList(context.CustomerCompanies.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)), "ID", "Name");
            var CustomerComany = context.CustomerCompanies.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.Name) }).ToList();
            ViewBag.CustomerComany = new SelectList(CustomerComany, "ID", "Code");
            ViewBag.Vehicle = new SelectList(context.Vehicles.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)), "VehicleID", "Code");
            //ViewBag.Broker = new SelectList(context.Vendors.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)), "ID", "Code");
            var Broker = context.Vendors.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyId)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.OwnerContactName) }).ToList();
            ViewBag.Broker = new SelectList(Broker, "ID", "Code");
            //ViewBag.Driver = new SelectList(context.Drivers.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)), "ID", "Name");
            var Driver = context.Drivers.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID)).ToList().Select(x => new { ID = x.ID, Code = string.Format("{0} | {1}", x.Code, x.Name) }).ToList();
            ViewBag.Driver = new SelectList(Driver, "ID", "Code");
            var list = context.Challans.Where(x => lstAssignedCompanies.Contains(x.OwnCompanyID) && x.IsDeleted != true).OrderByDescending(x => x.ID).ToList();

            return View(list);
        }
        #endregion
    }
}