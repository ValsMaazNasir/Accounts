using LiquadCargoManagment.Helpers;
using LiquadCargoManagment.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using static LiquadCargoManagment.Helpers.ApplicationHelper;

namespace LiquadCargoManagment.Controllers
{
    public class BaseController : Controller
    {
        protected readonly LCMEntities context;
        protected readonly SecurityTokenIdentifier _security;
        protected readonly ModelDML dml;
        protected readonly CompactBilty CompactBilty;
        protected readonly UniversalBilty Universal;
        public BaseController()
        {
            context = new LCMEntities();
            _security = new SecurityTokenIdentifier(context);
            dml = new ModelDML(context);
            CompactBilty = new CompactBilty(context);
            Universal = new UniversalBiltySearch(context);
            var sc = context.SoftwareSetups.FirstOrDefault();
            SoftwareFormatting.DateFormat = sc.DateType.Format;
            SoftwareFormatting.ContactNoFormat = sc.ContactNoType.Format;
            SoftwareFormatting.NumberFormat = sc.NoType.Format;
            SoftwareFormatting.Logo = sc.Logo;
        }
        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            ProfileImage = GetCookie("ProfileImage");
            Username = GetCookie("Username");
            UserID = GetCookie("UserID") != string.Empty ? Convert.ToInt64(GetCookie("UserID")) : 0;
            OwnCompanyID = GetCookie("OwnCompanyID") != string.Empty ? Convert.ToInt64(GetCookie("OwnCompanyID")) : 0;
            SubcriptionID = GetCookie("SubcriptionID") != string.Empty ? Convert.ToInt64(GetCookie("SubcriptionID")) : 0;
            ApplicationHelper.RoleID = GetCookie("RoleID") != string.Empty ? Convert.ToInt64(GetCookie("RoleID")) : 0;
            lstRolePerm = context.RolePermissions
                            .Where(x => x.RoleID == RoleID && x.Parameter != "None").ToList();
            var assignedCompanies = context.UserAssignedCompanies.Where(x => x.UserID == UserID).ToList();
            lstAssignedCompanies = new List<long?>();
            foreach (var item in assignedCompanies)
            {
                lstAssignedCompanies.Add(item.OwnCompanyID);
            }
            lstBiltyRole = new List<string>();
            var BiltyRolesList = context.BiltyRoles.Where(x => x.UserId == UserID).ToList();
            foreach (var item in BiltyRolesList)
            {
                lstBiltyRole.Add(item.BiltyRole1);
            }
            var ActionName = filterContext
                .ActionDescriptor.ActionName.ToLower();
            var formName = context.NavMenus.Where(x => x.ActionName.Equals(ActionName)).FirstOrDefault();
            if (formName != null)
            {
                string _params = _security.IsUserAuthenticFor(formName.FormID);
                if (_params == string.Empty)
                {
                    FormsAuthentication.SignOut();
                    FormsAuthentication.RedirectToLoginPage();

                }
                else
                {
                    Session["Allow"] = _params;                                                    
                    
                }
            }
            base.OnActionExecuting(filterContext);
        }
        public string RenderPartialToString(string viewName, object model)
        {
            ViewData.Model = model;
            using (StringWriter writer = new StringWriter())
            {
                ViewEngineResult vResult = ViewEngines.Engines.FindPartialView(ControllerContext, viewName);
                ViewContext vContext = new ViewContext(this.ControllerContext, vResult.View, ViewData, new TempDataDictionary(), writer);
                vResult.View.Render(vContext, writer);
                return writer.ToString();
            }
        }
        public RedirectToRouteResult UserNotValidate()
        {
            FormsAuthentication.SignOut();
            TempData["unauth"] = "something went wrong please login again for security purpose";
            return RedirectToAction("Login", "Account");
        }
    }
}